#!/bin/bash

#----------------------------------------------------------------------------
# environment & site config, if any
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
[ -f ${SCRIPTDIR}/config_env.sh ] && . ${SCRIPTDIR}/config_env.sh
#----------------------------------------------------------------------------

launch_cf_PBS_script="${SCRIPTDIR}/launch_cf.pbs"

[ -f ${launch_cf_PBS_script} ] || { echo "ERROR: cannot locate ${launch_cf_PBS_script}"; exit 1; }

#------------------------------------------------------------------
# bash function to count lines not beginning with "#" from a text file
count_non_comment_lines ()
{
    i=0
    while read line; do
	# skip comment lines beginning with "#"
	[[ ${line:0:1} == "#" ]] && continue || i=$((i + 1))
    done < "${1}"
    echo ${i}
    return 0
}


#------------------------------------------------------------------
usage ()
{
    echo "FIXME!!"

    cat <<EOF
${0} <-h|--help>
     <--queue PBS_QUEUE>
     <--ppn|--processors-per-node #CPUS>
     <--steps-per-node #Steps/node>
     <--nthreads|--threads-per-step #Threads/step>
     <--mem|--memory RAM>
     -A PBS_ACCOUNT -l walltime=01:00:00
     ... other PBS args ...
     <cmdfile>

---

All options in <>
EOF
}

#------------------------------------------------------------------
parse_args ()
{
    unset args_for_pbs

    while [ ${#} -gt 0 ] ; do
        # check the first argument
        case ${1} in

            "-h"|"--help")
                usage
                shift
                exit 1
                ;;

            "--queue")
                shift
                queue=${1}
                shift
                ;;

            "--ppn"|"--processors-per-node")
                shift
                ppn=${1}
                shift
                ;;

            "--steps-per-node")
                shift
                steps_per_node=${1}
                shift
                ;;

            "--nthreads"|"--threads-per-step")
                shift
                threads_per_step=${1}
                shift
                ;;

            "--mem"|"--memory")
                shift;
                memlimit=${1}
                shift
                ;;

            *)
                if [ -f ${1} ]; then
                    command_file="${1}"
                else
                    args_for_pbs="${args_for_pbs} ${1}"
                fi
                shift # past argument
                ;;
        esac
    done

    return
}

#------------------------------------------------------------------
# var defaults.
command_file="./cmdfile"
threads_per_step=1

case "${NCAR_HOST}" in
    "derecho")
        ppn=128
        memlimit="235G"
        queue="main"
        ;;
    "casper")
        # use less than full nodes on Casper.
        ppn=8
        memlimit="80G"
        queue="casper"
        ;;
    "cheyenne")
        ppn=36
        memlimit="50G"
        queue="regular"
        ;;
    *)
        echo "ERROR: Unrecognized NCAR_HOST=${NCAR_HOST}"
        exit 1
esac

# more defaults that depend on case above
steps_per_node=${ppn}

# finally, allow the user specify options
parse_args $@

#------------------------------------------------------------------
# error & consistency checking
[ -r ${command_file} ] || { echo "Cannot locate requested command file: ${command_file}"; exit 1; }
[ $((${steps_per_node}*${threads_per_step})) -le ${ppn} ] || { echo "ERROR: ${steps_per_node}*${threads_per_step} > ${ppn}, check inputs!"; exit 1; }

#------------------------------------------------------------------
# main execution follows...
nsteps=$(count_non_comment_lines ${command_file})

echo "Found nsteps=${nsteps} in ${command_file}"

#------------------------------------------------------------------
echo "Running ${steps_per_node} steps / node on NCAR resource ${NCAR_HOST}"

njobs=$(( ${nsteps} / ${steps_per_node} ))

# hackery: PBS will not allow us to submit a 1-entry array.
# for that case we will be submitted without a -J arg
[ ${njobs} -gt 0 ] && args_for_pbs="-J 0-${njobs} ${args_for_pbs}"

ss="1:ncpus=${ppn}:mpiprocs=${steps_per_node}:ompthreads=${threads_per_step}:mem=${memlimit}"

set -x
qsub -v command_file="${command_file}" \
     -q ${queue} -l select=${ss} \
     ${args_for_pbs} \
     ${launch_cf_PBS_script}
